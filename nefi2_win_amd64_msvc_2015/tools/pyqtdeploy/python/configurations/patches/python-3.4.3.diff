diff -ruN Python-3.4.3.orig/Include/unicodeobject.h Python-3.4.3/Include/unicodeobject.h
--- Python-3.4.3.orig/Include/unicodeobject.h	2015-02-25 11:27:44.000000000 +0000
+++ Python-3.4.3/Include/unicodeobject.h	2015-08-08 22:23:04.000000000 +0100
@@ -2265,6 +2265,14 @@
 /* Clear all static strings. */
 PyAPI_FUNC(void) _PyUnicode_ClearStaticStrings(void);
 
+#if defined(HAVE_VERY_BROKEN_MBSTOWCS)
+PyAPI_FUNC(size_t) _Py_mbstowcs(wchar_t *pwcs, const char *s, size_t n);
+PyAPI_FUNC(size_t) _Py_wcstombs(char *s, const wchar_t *pwcs, size_t n);
+#else
+#define _Py_mbstowcs    mbstowcs
+#define _Py_wcstombs    wcstombs
+#endif
+
 #ifdef __cplusplus
 }
 #endif
diff -ruN Python-3.4.3.orig/Lib/_bootlocale.py Python-3.4.3/Lib/_bootlocale.py
--- Python-3.4.3.orig/Lib/_bootlocale.py	2015-02-25 11:27:44.000000000 +0000
+++ Python-3.4.3/Lib/_bootlocale.py	2015-08-08 22:30:34.000000000 +0100
@@ -15,10 +15,8 @@
         _locale.CODESET
     except AttributeError:
         def getpreferredencoding(do_setlocale=True):
-            # This path for legacy systems needs the more complex
-            # getdefaultlocale() function, import the full locale module.
-            import locale
-            return locale.getpreferredencoding(do_setlocale)
+            # Android is the only "legacy system" we handle.
+            return 'UTF-8'
     else:
         def getpreferredencoding(do_setlocale=True):
             assert not do_setlocale
diff -ruN Python-3.4.3.orig/Lib/locale.py Python-3.4.3/Lib/locale.py
--- Python-3.4.3.orig/Lib/locale.py	2015-02-25 11:27:44.000000000 +0000
+++ Python-3.4.3/Lib/locale.py	2015-08-09 11:07:54.000000000 +0100
@@ -31,6 +31,30 @@
            "normalize", "LC_CTYPE", "LC_COLLATE", "LC_TIME", "LC_MONETARY",
            "LC_NUMERIC", "LC_ALL", "CHAR_MAX"]
 
+def _localeconv():
+    """ localeconv() -> dict.
+        Returns numeric and monetary locale-specific parameters.
+    """
+    # 'C' locale default values
+    return {'grouping': [127],
+            'currency_symbol': '',
+            'n_sign_posn': 127,
+            'p_cs_precedes': 127,
+            'n_cs_precedes': 127,
+            'mon_grouping': [],
+            'n_sep_by_space': 127,
+            'decimal_point': '.',
+            'negative_sign': '',
+            'positive_sign': '',
+            'p_sep_by_space': 127,
+            'int_curr_symbol': '',
+            'p_sign_posn': 127,
+            'thousands_sep': '',
+            'mon_thousands_sep': '',
+            'frac_digits': 127,
+            'mon_decimal_point': '',
+            'int_frac_digits': 127}
+
 def _strcoll(a,b):
     """ strcoll(string,string) -> int.
         Compares two strings according to the locale.
@@ -61,30 +85,6 @@
     LC_TIME = 2
     Error = ValueError
 
-    def localeconv():
-        """ localeconv() -> dict.
-            Returns numeric and monetary locale-specific parameters.
-        """
-        # 'C' locale default values
-        return {'grouping': [127],
-                'currency_symbol': '',
-                'n_sign_posn': 127,
-                'p_cs_precedes': 127,
-                'n_cs_precedes': 127,
-                'mon_grouping': [],
-                'n_sep_by_space': 127,
-                'decimal_point': '.',
-                'negative_sign': '',
-                'positive_sign': '',
-                'p_sep_by_space': 127,
-                'int_curr_symbol': '',
-                'p_sign_posn': 127,
-                'thousands_sep': '',
-                'mon_thousands_sep': '',
-                'frac_digits': 127,
-                'mon_decimal_point': '',
-                'int_frac_digits': 127}
-
     def setlocale(category, value=None):
         """ setlocale(integer,string=None) -> string.
             Activates/queries locale processing.
@@ -94,6 +94,8 @@
         return 'C'
 
 # These may or may not exist in _locale, so be sure to set them.
+if 'localeconv' not in globals():
+    localeconv = _localeconv
 if 'strxfrm' not in globals():
     strxfrm = _strxfrm
 if 'strcoll' not in globals():
diff -ruN Python-3.4.3.orig/Modules/_decimal/_decimal.c Python-3.4.3/Modules/_decimal/_decimal.c
--- Python-3.4.3.orig/Modules/_decimal/_decimal.c	2015-02-25 11:27:45.000000000 +0000
+++ Python-3.4.3/Modules/_decimal/_decimal.c	2015-08-08 22:23:04.000000000 +0100
@@ -3141,7 +3141,7 @@
     wchar_t buf[2];
     size_t n;
 
-    n = mbstowcs(buf, s, 2);
+    n = _Py_mbstowcs(buf, s, 2);
     if (n != 1) { /* Issue #7442 */
         PyErr_SetString(PyExc_ValueError,
             "invalid decimal point or unsupported "
diff -ruN Python-3.4.3.orig/Modules/_localemodule.c Python-3.4.3/Modules/_localemodule.c
--- Python-3.4.3.orig/Modules/_localemodule.c	2015-02-25 11:27:45.000000000 +0000
+++ Python-3.4.3/Modules/_localemodule.c	2015-08-08 22:23:04.000000000 +0100
@@ -127,6 +127,7 @@
     return result_object;
 }
 
+#if !defined(HAVE_BROKEN_LOCALECONV)
 PyDoc_STRVAR(localeconv__doc__,
 "() -> dict. Returns numeric and monetary locale-specific parameters.");
 
@@ -200,6 +201,7 @@
     Py_XDECREF(result);
     return NULL;
 }
+#endif
 
 #if defined(HAVE_WCSCOLL)
 PyDoc_STRVAR(strcoll__doc__,
@@ -569,8 +571,10 @@
 static struct PyMethodDef PyLocale_Methods[] = {
   {"setlocale", (PyCFunction) PyLocale_setlocale,
    METH_VARARGS, setlocale__doc__},
+#if !defined(HAVE_BROKEN_LOCALECONV)
   {"localeconv", (PyCFunction) PyLocale_localeconv,
    METH_NOARGS, localeconv__doc__},
+#endif
 #ifdef HAVE_WCSCOLL
   {"strcoll", (PyCFunction) PyLocale_strcoll,
    METH_VARARGS, strcoll__doc__},
diff -ruN Python-3.4.3.orig/Modules/getpath.c Python-3.4.3/Modules/getpath.c
--- Python-3.4.3.orig/Modules/getpath.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Modules/getpath.c	2015-08-08 22:23:04.000000000 +0100
@@ -526,7 +526,7 @@
       * absolutize() should help us out below
       */
     else if(0 == _NSGetExecutablePath(execpath, &nsexeclength) && execpath[0] == SEP) {
-        size_t r = mbstowcs(progpath, execpath, MAXPATHLEN+1);
+        size_t r = _Py_mbstowcs(progpath, execpath, MAXPATHLEN+1);
         if (r == (size_t)-1 || r > MAXPATHLEN) {
             /* Could not convert execpath, or it's too long. */
             progpath[0] = '\0';
diff -ruN Python-3.4.3.orig/Modules/grpmodule.c Python-3.4.3/Modules/grpmodule.c
--- Python-3.4.3.orig/Modules/grpmodule.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Modules/grpmodule.c	2015-08-08 22:23:04.000000000 +0100
@@ -135,6 +135,7 @@
 
     if ((d = PyList_New(0)) == NULL)
         return NULL;
+#if !defined(HAVE_BROKEN_GETGRENT)
     setgrent();
     while ((p = getgrent()) != NULL) {
         PyObject *v = mkgrent(p);
@@ -147,6 +148,7 @@
         Py_DECREF(v);
     }
     endgrent();
+#endif
     return d;
 }
 
diff -ruN Python-3.4.3.orig/Modules/main.c Python-3.4.3/Modules/main.c
--- Python-3.4.3.orig/Modules/main.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Modules/main.c	2015-08-08 22:23:04.000000000 +0100
@@ -620,7 +620,7 @@
                "not enough memory to copy PYTHONEXECUTABLE");
         }
 
-        mbstowcs(buffer, p, len);
+        _Py_mbstowcs(buffer, p, len);
         Py_SetProgramName(buffer);
         /* buffer is now handed off - do not free */
     } else {
diff -ruN Python-3.4.3.orig/Modules/posixmodule.c Python-3.4.3/Modules/posixmodule.c
--- Python-3.4.3.orig/Modules/posixmodule.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Modules/posixmodule.c	2015-08-08 22:23:04.000000000 +0100
@@ -6068,7 +6068,7 @@
     if (_Py_set_inheritable(master_fd, 0, NULL) < 0)
         goto posix_error;
 
-#if !defined(__CYGWIN__) && !defined(HAVE_DEV_PTC)
+#if !defined(__CYGWIN__) && !defined(HAVE_DEV_PTC) && defined(I_PUSH)
     ioctl(slave_fd, I_PUSH, "ptem"); /* push ptem */
     ioctl(slave_fd, I_PUSH, "ldterm"); /* push ldterm */
 #ifndef __hpux
diff -ruN Python-3.4.3.orig/Modules/pwdmodule.c Python-3.4.3/Modules/pwdmodule.c
--- Python-3.4.3.orig/Modules/pwdmodule.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Modules/pwdmodule.c	2015-08-08 22:23:04.000000000 +0100
@@ -72,7 +72,11 @@
     SETS(setIndex++, p->pw_passwd);
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromUid(p->pw_uid));
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromGid(p->pw_gid));
+#if !defined(HAVE_BROKEN_GECOS)
     SETS(setIndex++, p->pw_gecos);
+#else
+    SETS(setIndex++, "");
+#endif
     SETS(setIndex++, p->pw_dir);
     SETS(setIndex++, p->pw_shell);
 
diff -ruN Python-3.4.3.orig/Modules/termios.c Python-3.4.3/Modules/termios.c
--- Python-3.4.3.orig/Modules/termios.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Modules/termios.c	2015-08-08 22:23:04.000000000 +0100
@@ -233,7 +233,11 @@
     if (!PyArg_ParseTuple(args, "O&:tcdrain",
                           fdconv, &fd))
         return NULL;
+#if !defined(HAVE_BROKEN_TCDRAIN)
     if (tcdrain(fd) == -1)
+#else
+    if (ioctl(fd, TCSBRK, 1) == -1)
+#endif
         return PyErr_SetFromErrno(TermiosError);
 
     Py_INCREF(Py_None);
diff -ruN Python-3.4.3.orig/Modules/zlib/gzlib.c Python-3.4.3/Modules/zlib/gzlib.c
--- Python-3.4.3.orig/Modules/zlib/gzlib.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Modules/zlib/gzlib.c	2015-08-08 22:23:04.000000000 +0100
@@ -58,7 +58,7 @@
             msgbuf[chars] = 0;
         }
 
-        wcstombs(buf, msgbuf, chars + 1);
+        _Py_wcstombs(buf, msgbuf, chars + 1);
         LocalFree(msgbuf);
     }
     else {
@@ -190,7 +190,7 @@
     /* save the path name for error messages */
 #ifdef _WIN32
     if (fd == -2) {
-        len = wcstombs(NULL, path, 0);
+        len = _Py_wcstombs(NULL, path, 0);
         if (len == (size_t)-1)
             len = 0;
     }
@@ -205,7 +205,7 @@
 #ifdef _WIN32
     if (fd == -2)
         if (len)
-            wcstombs(state->path, path, len + 1);
+            _Py_wcstombs(state->path, path, len + 1);
         else
             *(state->path) = 0;
     else
diff -ruN Python-3.4.3.orig/Modules/zlib/minigzip.c Python-3.4.3/Modules/zlib/minigzip.c
--- Python-3.4.3.orig/Modules/zlib/minigzip.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Modules/zlib/minigzip.c	2015-08-08 22:23:04.000000000 +0100
@@ -105,7 +105,7 @@
             msgbuf[chars] = 0;
         }
 
-        wcstombs(buf, msgbuf, chars + 1);
+        _Py_wcstombs(buf, msgbuf, chars + 1);
         LocalFree(msgbuf);
     }
     else {
diff -ruN Python-3.4.3.orig/Objects/unicodeobject.c Python-3.4.3/Objects/unicodeobject.c
--- Python-3.4.3.orig/Objects/unicodeobject.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Objects/unicodeobject.c	2015-08-08 22:23:04.000000000 +0100
@@ -3192,7 +3192,7 @@
         buf[0] = *wstr;
         wstr++;
 #endif
-        len = wcstombs(outbuf, buf, sizeof(outbuf));
+        len = _Py_wcstombs(outbuf, buf, sizeof(outbuf));
         if (len == (size_t)-1)
             return previous - start;
     }
@@ -3274,7 +3274,7 @@
         /* strict mode */
         size_t len, len2;
 
-        len = wcstombs(NULL, wstr, 0);
+        len = _Py_wcstombs(NULL, wstr, 0);
         if (len == (size_t)-1) {
             error_pos = (size_t)-1;
             goto encode_error;
@@ -3286,7 +3286,7 @@
             return NULL;
         }
 
-        len2 = wcstombs(PyBytes_AS_STRING(bytes), wstr, len+1);
+        len2 = _Py_wcstombs(PyBytes_AS_STRING(bytes), wstr, len+1);
         if (len2 == (size_t)-1 || len2 > len) {
             error_pos = (size_t)-1;
             goto encode_error;
@@ -3540,7 +3540,7 @@
     else {
         /* strict mode */
 #ifndef HAVE_BROKEN_MBSTOWCS
-        wlen = mbstowcs(NULL, str, 0);
+        wlen = _Py_mbstowcs(NULL, str, 0);
 #else
         wlen = len;
 #endif
@@ -3558,7 +3558,7 @@
                 return PyErr_NoMemory();
         }
 
-        wlen2 = mbstowcs(wstr, str, wlen+1);
+        wlen2 = _Py_mbstowcs(wstr, str, wlen+1);
         if (wlen2 == (size_t)-1) {
             if (wstr != smallbuf)
                 PyMem_Free(wstr);
@@ -15466,6 +15466,69 @@
     return PyModule_Create(&_string_module);
 }
 
+#if defined(HAVE_VERY_BROKEN_MBSTOWCS)
+/*
+ * These are the absolutely minimal implementations needed by Python to
+ * implement PEP 383.
+ */
+
+size_t _Py_mbstowcs(wchar_t *pwcs, const char *s, size_t n)
+{
+    size_t room;
+    char ch;
+
+    if (pwcs == NULL)
+        return strlen(s);
+
+    room = n;
+
+    while ((ch = *s++) != '\0' && room > 0)
+    {
+        if (ch <= 0x7f)
+            *pwcs = ch;
+        else
+            *pwcs = 0xdc00 + ch;
+
+        ++pwcs;
+        --room;
+    }
+
+    if (room > 0)
+        *pwcs = 0;
+
+    return n - room;
+}
+
+size_t _Py_wcstombs(char *s, const wchar_t *pwcs, size_t n)
+{
+    size_t room;
+    wchar_t w_ch;
+
+    room = n;
+
+    while ((w_ch = *pwcs++) != 0 && room > 0)
+    {
+        char ch;
+
+        if (w_ch <= 0x7f)
+            ch = (char)w_ch;
+        else if (0xdc80 <= w_ch && w_ch <= 0xcff)
+            ch = (char)(0xdc00 - w_ch);
+        else
+            return (size_t)-1;
+
+        if (s != NULL)
+            *s++ = ch;
+
+        --room;
+    }
+
+    if (s != NULL && room > 0)
+        *s = '\0';
+
+    return n - room;
+}
+#endif
 
 #ifdef __cplusplus
 }
diff -ruN Python-3.4.3.orig/Python/fileutils.c Python-3.4.3/Python/fileutils.c
--- Python-3.4.3.orig/Python/fileutils.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Python/fileutils.c	2015-08-08 22:23:04.000000000 +0100
@@ -303,7 +303,7 @@
      */
     argsize = strlen(arg);
 #else
-    argsize = mbstowcs(NULL, arg, 0);
+    argsize = _Py_mbstowcs(NULL, arg, 0);
 #endif
     if (argsize != (size_t)-1) {
         if (argsize == PY_SSIZE_T_MAX)
@@ -314,7 +314,7 @@
         res = (wchar_t *)PyMem_RawMalloc(argsize*sizeof(wchar_t));
         if (!res)
             goto oom;
-        count = mbstowcs(res, arg, argsize);
+        count = _Py_mbstowcs(res, arg, argsize);
         if (count != (size_t)-1) {
             wchar_t *tmp;
             /* Only use the result if it contains no
@@ -478,9 +478,9 @@
             else {
                 buf[0] = c;
                 if (bytes != NULL)
-                    converted = wcstombs(bytes, buf, size);
+                    converted = _Py_wcstombs(bytes, buf, size);
                 else
-                    converted = wcstombs(NULL, buf, 0);
+                    converted = _Py_wcstombs(NULL, buf, 0);
                 if (converted == (size_t)-1) {
                     if (result != NULL)
                         PyMem_Free(result);
@@ -809,7 +809,7 @@
     char *cpath;
     char cmode[10];
     size_t r;
-    r = wcstombs(cmode, mode, 10);
+    r = _Py_wcstombs(cmode, mode, 10);
     if (r == (size_t)-1 || r >= 10) {
         errno = EINVAL;
         return NULL;
diff -ruN Python-3.4.3.orig/Python/formatter_unicode.c Python-3.4.3/Python/formatter_unicode.c
--- Python-3.4.3.orig/Python/formatter_unicode.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Python/formatter_unicode.c	2015-08-08 22:23:04.000000000 +0100
@@ -666,6 +666,7 @@
 get_locale_info(int type, LocaleInfo *locale_info)
 {
     switch (type) {
+#if !defined(HAVE_BROKEN_LOCALECONV)
     case LT_CURRENT_LOCALE: {
         struct lconv *locale_data = localeconv();
         locale_info->decimal_point = PyUnicode_DecodeLocale(
@@ -683,6 +684,9 @@
         locale_info->grouping = locale_data->grouping;
         break;
     }
+#else
+    case LT_CURRENT_LOCALE:
+#endif
     case LT_DEFAULT_LOCALE:
         locale_info->decimal_point = PyUnicode_FromOrdinal('.');
         locale_info->thousands_sep = PyUnicode_FromOrdinal(',');
diff -ruN Python-3.4.3.orig/Python/pystrtod.c Python-3.4.3/Python/pystrtod.c
--- Python-3.4.3.orig/Python/pystrtod.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Python/pystrtod.c	2015-08-08 22:23:04.000000000 +0100
@@ -165,7 +165,9 @@
 {
     char *fail_pos;
     double val;
+#if !defined(HAVE_BROKEN_LOCALECONV)
     struct lconv *locale_data;
+#endif
     const char *decimal_point;
     size_t decimal_point_len;
     const char *p, *decimal_point_pos;
@@ -177,8 +179,12 @@
 
     fail_pos = NULL;
 
+#if !defined(HAVE_BROKEN_LOCALECONV)
     locale_data = localeconv();
     decimal_point = locale_data->decimal_point;
+#else
+    decimal_point = ".";
+#endif
     decimal_point_len = strlen(decimal_point);
 
     assert(decimal_point_len != 0);
@@ -378,6 +384,7 @@
 Py_LOCAL_INLINE(void)
 change_decimal_from_locale_to_dot(char* buffer)
 {
+#if !defined(HAVE_BROKEN_LOCALECONV)
     struct lconv *locale_data = localeconv();
     const char *decimal_point = locale_data->decimal_point;
 
@@ -402,6 +409,7 @@
             }
         }
     }
+#endif
 }
 
 
diff -ruN Python-3.4.3.orig/Python/pythonrun.c Python-3.4.3/Python/pythonrun.c
--- Python-3.4.3.orig/Python/pythonrun.c	2015-02-25 11:27:46.000000000 +0000
+++ Python-3.4.3/Python/pythonrun.c	2015-08-08 22:23:04.000000000 +0100
@@ -907,7 +907,7 @@
         char* chome = Py_GETENV("PYTHONHOME");
         if (chome) {
             size_t size = Py_ARRAY_LENGTH(env_home);
-            size_t r = mbstowcs(env_home, chome, size);
+            size_t r = _Py_mbstowcs(env_home, chome, size);
             if (r != (size_t)-1 && r < size)
                 home = env_home;
         }
